name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CTEST_OUTPUT_ON_FAILURE: ON
  CTEST_PARALLEL_LEVEL: 2

jobs:
  ####################
  # Linux / macOS
  ####################

  Unix:
    name: ${{ matrix.name }} (${{ matrix.config }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest]
        config: [Debug, Release]
        include:
          - os: macos-latest
            name: macOS
          - os: ubuntu-18.04
            name: Linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install \
          libblas-dev \
          libboost-filesystem-dev \
          libboost-system-dev \
          libboost-thread-dev \
          libglu1-mesa-dev \
          libsuitesparse-dev \
          xorg-dev \
          ccache

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install ccache gmp

      - name: Cache Build
        id: cache-build
        uses: actions/cache@v1
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.config }}-cache

      - name: Prepare ccache
        run: |
          ccache --max-size=1.0G
          ccache -V && ccache --show-stats && ccache --zero-stats

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \

      - name: Build
        run: cd build; make -j2; ccache --show-stats

      - name: Tests
        run: cd build; ctest --verbose --output-on-failure

      - name: Run Example
        run: |
          cd build
          ./TriWild --input ../data/rocket.obj
          ./TriWild --input ../data/rocket.obj --feature-input ../data/rocket.json

  ####################
  # Windows
  ####################

  Windows:
    name: Windows-${{ matrix.btype }} (${{ matrix.config }})
    runs-on: windows-2019
    env:
      CC: cl.exe
      CXX: cl.exe
      SCCACHE_IDLE_TIMEOUT: "12000"
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]
    steps:
      - name: Stetup Conda
        uses: s-weigand/setup-conda@v1
        with:
          conda-channels: anaconda, conda-forge
          python-version: 3.6

      - name: Install Dependencies
        shell: powershell
        run: |
          conda install -c conda-forge mpir -y

      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10
      - uses: seanmiddleditch/gha-setup-ninja@master
        # https://github.com/actions/cache/issues/101
      - name: Set env
        run: |
          echo "::set-env name=appdata::$($env:LOCALAPPDATA)"
          echo "::set-env name=GMP_INC::C:\Miniconda\Library\include"

      - name: Set GMP env
        run: echo "::set-env name=GMP_LIB::C:\Miniconda\Library\lib"

      - name: Cache build
        id: cache-build
        uses: actions/cache@v1
        with:
          path: ${{ env.appdata }}\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.btype }}-cache

      - name: Prepare sccache
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install sccache --global
          # Scoop modifies the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"

      - name: Configure and build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake --version
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -B build ^
            -S .
          cd build
          ninja -j1

      - name: Tests
        run: |
          cd build
          ctest --verbose --output-on-failure

      - name: Run Example
        shell: powershell
        run: |
          cd build
          cp C:\Miniconda\Library\bin\mpir.dll .\
          cp C:\Miniconda\Library\bin\gmp.dll .\
          .\TriWild.exe --input ..\data.exe\rocket.exe.obj
          .\TriWild.exe --input ..\data.exe\rocket.exe.obj --feature-input ..\data.exe\rocket.exe.json
